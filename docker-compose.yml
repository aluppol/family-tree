version: "3.9"

services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - .env
    volumes:
      - ./db/postgres/data:/var/lib/postgresql/data
      - ./db/postgres/init_template.sql:/docker-entrypoint-initdb.d/init_template.sql
      - ./db/postgres/inject-env-vars.sh:/docker-entrypoint-initdb.d/inject-env-vars.sh
    networks:
      - src
    command: >
      bash -c '
        docker-entrypoint-initdb.d/inject-env-vars.sh &&
        docker-entrypoint.sh postgres'

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./db/redis:/data
#    networks:
#      - app_net
    restart: always

  mongo:
    image: mongo
    restart: always
    env_file:
      - .env
    volumes:
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"

  auth:
    build: ./src/api/auth
    command: python manage.py runserver 0.0.0.0:3000
    volumes:
      - ./src/api/auth:/app
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - redis
      - mongo

  people:
    build: ./src/api/people
    command: python manage.py runserver 0.0.0.0:3001
    volumes:
      - ./src/api/people:/app
    env_file:
      - .env
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - auth

  nginx:
    image: nginx:1.21.0-alpine
    restart: always
    volumes:
      - ./src/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth
      - people

networks:
  auth:
  src: